
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

[Sauvegarde de la session précédente restaurée]

> #------------------------------
> 
> 
> 
> modelname1 = "Exp_Vs_Regulier_fini.res"
> data1 = read.table(modelname1)
> attach(data1);
> 
> L  = V1
> 
> N1 = V2
> R1 = V3
> Pr1 = log10(V4)
> Ps1 = V5
> PPW1 = (1/(R1*Ps1))*1000
> 
> 
> N2 = V6
> R2 = V7
> Pr2 = log10(V8)
> Ps2 = V9
> PPW2 = (1/(R2*Ps2))*1000
> 
> 
> N3 = V10
> R3 = V11
> Pr3 = log10(V12)
> Ps3 = V13
> PPW3 = (1/(R3*Ps3))*1000
> 
> N4 = V14
> R4 = V15
> Pr4 = log10(V16)
> Ps4 = V17
> PPW4 = (1/(R4*Ps4))*1000
> 
> 
> #Pstate1
> LB_N = V18
> LB_R = V19
> LB_Pr = log10(V20)
> LB_Ps = V21
> PPW_LB = (1/(LB_R*LB_Ps))*1000
> 
> #Pstate6
> UB_N = V22
> UB_R = V23
> UB_Pr = log10(V24)
> UB_Ps = V25
> PPW_UB = log10(1/(UB_R*UB_Ps))*1000
> 
> 
> e1 = expression(paste(Gamma, "1 = {3,6,12,24,48}")) #Recnnois symoble math :) 
> e2 = expression(paste(Gamma, "2 = {10,20,30,40,50}"))  #Recnnois symoble math :) 
> e3 = expression(paste(Gamma, "3 = {20,30,40,50,60}"))  #Recnnois symoble math :) 
> e4 = expression(paste(Gamma, "4 = {30,40,50,60,70}"))  #Recnnois symoble math :) 
> e5 = "Lower bound"  #Recnnois symoble math :) 
> e6 = "Upper bound"  #Recnnois symoble math :) 
> 
> Lambda = expression(paste("Arrival rate ",lambda)) #Reconnais symbole math :)
> 
> plot(L,N1,type ="b",xlab = Lambda, xaxt="none",ylim=c(0,80),ylab = "Mean number of jobs",col = "black",pch=15 )
> lines(L,N2,type ="b",col = "red",pch=16 )
> lines(L,N3,type ="b",col = "green",pch=17 )
> lines(L,N4,type ="b",col = "blue",pch=11 )
> axis(1, seq(0,75,5))
> 
> legend("topleft", legend=c(e1, e2, e3,e4), col=c("black", "red", "green","blue"), pch=c(15,16,17,11), cex=1);
> 
> plot(L,R1,type ="b",xlab = Lambda, xaxt="none",ylim=c(0.2,1.8),ylab = "Mean response time",col = "black",pch=15 )
> lines(L,R2,type ="b",col = "red",pch=16 )
> lines(L,R3,type ="b",col = "green",pch=17 )
> lines(L,R4,type ="b",col = "blue",pch=11 )
> axis(1, seq(0,75,5))
> 
> legend("topleft", legend=c(e1, e2, e3,e4), col=c("black", "red", "green","blue"), pch=c(15,16,17,11), cex=1);       
>        
> 
> plot(L,Ps1,type ="b",xlab = Lambda, xaxt="none",ylim=c(0,2000),ylab = "Power consumption (Watts)",col = "black",pch=15 )
> lines(L,Ps2,type ="b",col = "red",pch=16 )
> lines(L,Ps3,type ="b",col = "green",pch=17 )
> lines(L,Ps4,type ="b",col = "blue",pch=11 )
> axis(1, seq(0,75,5))
> 
> legend("bottomright", legend=c(e1, e2, e3,e4), col=c("black", "red", "green","blue"), pch=c(15,16,17,18), cex=1);
> 
> plot(L,Pr1,type ="b",xlab = Lambda, xaxt="none",ylim=c(-130,0),ylab = "Tasks rejection probability (log10 scale)",col = "black",pch=15 )
> lines(L,Pr2,type ="b",col = "red",pch=16 )
> lines(L,Pr3,type ="b",col = "green",pch=17 )
> lines(L,Pr4,type ="b",col = "blue",pch=11 )
> axis(1, seq(0,75,5))
> 
> legend("bottomright", legend=c(e1, e2, e3,e4), col=c("black", "red", "green","blue"), pch=c(15,16,17,11), cex=1);
> 
> plot(L,PPW1,type ="b",xlab = Lambda, xaxt="none",ylab = expression(paste("PPW ",(Watts.secs)^{-1})),col = "black",pch=15 )
> mtext(expression(paste("x",10^{-3})), side = 3, line = 0, at = 0)
> lines(L,PPW2,type ="b",col = "red",pch=16 )
> lines(L,PPW3,type ="b",col = "green",pch=17 )
> lines(L,PPW4,type ="b",col = "blue",pch=11 )
> axis(1, seq(0,75,5))
> 
> legend("topright", legend=c(e1, e2, e3,e4), col=c("black", "red", "green","blue"), pch=c(15,16,17,11), cex=1);
>        
> 
> 
> proc.time()
utilisateur     système      écoulé 
      0.304       0.024       0.322 
